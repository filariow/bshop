// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/storage/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	bshop "github.com/filariow/bshop"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBeerRepository is a mock of BeerRepository interface
type MockBeerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBeerRepositoryMockRecorder
}

// MockBeerRepositoryMockRecorder is the mock recorder for MockBeerRepository
type MockBeerRepositoryMockRecorder struct {
	mock *MockBeerRepository
}

// NewMockBeerRepository creates a new mock instance
func NewMockBeerRepository(ctrl *gomock.Controller) *MockBeerRepository {
	mock := &MockBeerRepository{ctrl: ctrl}
	mock.recorder = &MockBeerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBeerRepository) EXPECT() *MockBeerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockBeerRepository) Create(arg0 context.Context, arg1 bshop.Beer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockBeerRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBeerRepository)(nil).Create), arg0, arg1)
}

// Read mocks base method
func (m *MockBeerRepository) Read(arg0 context.Context, arg1 int64) (bshop.Beer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1)
	ret0, _ := ret[0].(bshop.Beer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockBeerRepositoryMockRecorder) Read(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockBeerRepository)(nil).Read), arg0, arg1)
}

// Update mocks base method
func (m *MockBeerRepository) Update(arg0 context.Context, arg1 bshop.Beer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockBeerRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBeerRepository)(nil).Update), arg0, arg1)
}

// Delete mocks base method
func (m *MockBeerRepository) Delete(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockBeerRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBeerRepository)(nil).Delete), arg0, arg1)
}

// List mocks base method
func (m *MockBeerRepository) List(arg0 context.Context) ([]bshop.Beer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]bshop.Beer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockBeerRepositoryMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBeerRepository)(nil).List), arg0)
}
